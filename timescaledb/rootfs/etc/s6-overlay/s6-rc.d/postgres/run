#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Start PostgreSQL service if enabled
# ==============================================================================
declare POSTGRES_DATA
declare UPDATE
declare POSTGRES_PID
declare VERSION_FILE
declare BUILD_TIMESTAMP

POSTGRES_DATA=/data/postgres
VERSION_FILE=/data/version
BUILD_TIMESTAMP="$(cat /build-timestamp)"
UPDATE=false

# Check if we need to update
if [[ $(cat ${VERSION_FILE}) != ${BUILD_TIMESTAMP} ]]; then
	UPDATE=true
fi

# Start Postgres
bashio::log.info "Starting PostgreSQL.."
su - postgres -c "postgres -D ${POSTGRES_DATA}" &
POSTGRES_PID=$!
bashio::log.info "done"

# Wait for postgres to become available..
while ! psql -U "postgres" postgres -c "" 2> /dev/null; do
	sleep 1
done

# Setup postgres user on first run
if [[ -f "/data/firstrun" ]]; then
	bashio::log.info "Setting up postgres user.."
	psql -U "postgres" postgres -c "ALTER USER postgres WITH PASSWORD 'homeassistant';"
fi

# Check for extension updates..
if bashio::var.true "${UPDATE}"; then

	bashio::log.notice "Addon was updated to version timestamp: ${BUILD_TIMESTAMP}. Performing database upgrades..."

	# Fetch all databases..
	psql \
		-X \
		-U postgres \
		-c "select datname from pg_database where datallowconn = true;" \
		--set ON_ERROR_STOP=on \
		--no-align \
		-t \
		--field-separator ' ' \
		--quiet \
	| while read datname; do
		# Update Timescale when needed
		psql -X -U postgres -d ${datname} -c "select 1 from pg_extension where extname = 'timescaledb';" | grep -q 1 \
		&& bashio::log.info "Try updating Timescale Extension for database: '${datname}'.." \
		&& psql -X -U postgres -d ${datname} -c "ALTER EXTENSION timescaledb UPDATE;" || true >> /var/log/timescaledb.upgrade.log

		# Update Postgis when needed
		psql -X -U postgres -d ${datname} -c "select 1 from pg_extension where extname = 'postgis';" | grep -q 1 \
		&& bashio::log.info "Try updating Postgis Extension for database: '${datname}'.." \
		&& psql -X -U postgres -d ${datname} -c "SELECT PostGIS_Extensions_Upgrade();" || true >> /var/log/postgis.upgrade.log

		# Update TimescaleDb Toolkit when needed
		psql -X -U postgres -d ${datname} -c "select 1 from pg_extension where extname = 'timescaledb_toolkit';" | grep -q 1 \
		&& bashio::log.info "Try updating TimescaleDb Toolkit Extension for database: '${datname}'.." \
		&& psql -X -U postgres -d ${datname} -c "ALTER EXTENSION timescaledb_toolkit UPDATE;" || true >> /var/log/timescaledb_toolkit.upgrade.log
	done
fi


if bashio::config.has_value 'databases'; then
	# Create all databases if not exist
	for database in $(bashio::config "databases"); do
		bashio::log.info "Create database if not exist: '${database}'"
		psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '${database}'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE ${database}"
	done
	bashio::log.info "done"

	# Enable the timescale-extensions for all indicated databases
	for database in $(bashio::config "timescale_enabled"); do
		if ! (psql -X -U postgres -d ${database} -c "select 1 from pg_extension where extname = 'timescaledb';" | grep -q 1); then
			bashio::log.info "Enabling Timescale Extension for database: '${database}'"
			psql -U "postgres" -d ${database} -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;" || true >> /var/log/timescaledb.create.log
		fi;
	done
fi
bashio::log.info "done"

# Exit update mode
rm -f /data/firstrun
if bashio::var.true "${UPDATE}"; then
	bashio::log.info "Exiting update mode and restarting.."
	# Write new addon-version
	echo "${BUILD_TIMESTAMP}" > ${VERSION_FILE}
	sleep 3

	# Don't fail on the call. When running in standalone, this will fail.
	bashio::addon.restart || true
fi

# And let it roll
bashio::log.notice "TimescaleDb is running!"
wait "${POSTGRES_PID}"
